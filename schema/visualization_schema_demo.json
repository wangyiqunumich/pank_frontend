{"Conversion_table": {
      "query_vocab_frontend_KG": {
          "sequence variant": "sequence_variant",
          "gene": "gene",
          "eQTL of": "fine_mapped_eQTL"
      },
      "query_vocab_KG_frontend": {
          "sequence_variant": "sequence variant",
          "gene": "gene",
          "fine_mapped_eQTL": "eQTL of"
      }
        "data_source_KG_frontend": {
          "GTEx; SusieR": "eQTL GTEx",
          "InsPIRE; SusieR": "eQTL Gene-level InsPIRE",
          "splicing; GTEx; SusieR": "splicing QTL GTEx",
          "exon; InsPIRE": "exon-QTL Exon-level InsPIRE"
      },
      "data_source_frontend_KG": {
          "eQTL GTEx": "GTEx; SusieR",
          "eQTL Gene-level InsPIRE": "InsPIRE; SusieR",
          "splicing QTL GTEx": "splicing; GTEx; SusieR",
          "exon-QTL Exon-level InsPIRE": "exon; InsPIRE"
      },
        "Tissue_KG_tissue_name": {
          "GTEx; SusieR": "pancreatic",
          "INSPIRE; SusieR": "islet"
      },
        "Color": {
            "gene": "#ABD0F1",
            "sequence_variant": "#FFB77F",
            "pathway": "#F6C957",
            "ontology" : "#8c564b",
            "article":"#e377c2"
      }
},
    "sequence_variant - fine_mapped_eQTL - gene": {
        "general - relationship - specific": {
            "question": [
                "Which {SNP} serves as the {eQTL} for {gene@gene@}?"
            ],
            "cyper_for_intermediate_page": 
              "MATCH (snp_node:variants:sequence_variant)-[eQTL_of:fine_mapped_eQTL]-(gene_node:coding_elements {id:'@gene@'}) MATCH (snp_node)-[belong_to_credible_set:belong_to_credible_set]->(credible_set_node:credible_set) RETURN snp_node, eQTL_of, gene_node, belong_to_credible_set, credible_set_node"
              ,
            "cyper_for_intermediate_KG_viewer": 
            "// Step 1: Match snp_node, r, and gene_node\n MATCH (gene_node:coding_elements {id: '@gene@'})\n    WITH gene_node\n\n// Step 3: Find and rank extend_node_snp by pip\nOPTIONAL MATCH (gene_node)-[r_extend_snp]-(extend_node_snp)\nWHERE r_extend_snp.pip IS NOT NULL\nWITH gene_node, \n     r_extend_snp, extend_node_snp, toFloat(r_extend_snp.pip) AS pip_value\nORDER BY pip_value DESC\nWITH gene_node,\n     collect(extend_node_snp)[0..6] AS top_extend_snps,\n     collect(r_extend_snp)[0..6] AS top_r_extend_snps,\n     collect(pip_value)[0..6] AS top_pip_values\n\n// Step 6: Return results\nRETURN gene_node,\n       top_extend_snps AS extend_node_snps,\n       top_r_extend_snps AS r_extend_snps,\n       top_pip_values AS pip_values"
            ,
            "selection_result" : 
              "snp_node, eQTL_of, gene_node, belong_to_credible_set, credible_set_node, data_source, tissue"
              ,
            "question_for_result": 
              "How does the SNP @snp_node@ influence the expression quantitative trait locus (eQTL) of @gene_node@ in @tissue@ tissue, as reported by @data_source@?"
              ,
            "cyper_for_result_page_all_nodes_specific": 
              "// Step 1: Match snp_node, r, and gene_node\nMATCH (snp_node:variants:sequence_variant {id: '@snp_node@'})\n    -[r:fine_mapped_eQTL]-\n    (gene_node:coding_elements {id: '@gene_node@'})\nWITH snp_node, r, gene_node\n\n// Step 2: Find and rank extend_node_gene by cDSD_distance\nOPTIONAL MATCH (gene_node)-[r_extend_gene]-(extend_node_gene)\nWHERE r_extend_gene.cDSD_distance IS NOT NULL\nWITH snp_node, r, gene_node, r_extend_gene, extend_node_gene,\n     toFloat(r_extend_gene.cDSD_distance) AS distance\nORDER BY distance ASC\nWITH snp_node, r, gene_node, collect(extend_node_gene)[0..2] AS top_extend_genes,\n     collect(r_extend_gene)[0..2] AS top_r_extend_genes,\n     collect(distance)[0..2] AS top_distances\n\n// Step 3: Find and rank extend_node_snp by pip\nOPTIONAL MATCH (gene_node)-[r_extend_snp]-(extend_node_snp)\nWHERE r_extend_snp.pip IS NOT NULL\nWITH snp_node, r, gene_node, top_extend_genes, top_r_extend_genes, top_distances,\n     r_extend_snp, extend_node_snp, toFloat(r_extend_snp.pip) AS pip_value\nORDER BY pip_value DESC\nWITH snp_node, r, gene_node, top_extend_genes, top_r_extend_genes, top_distances,\n     collect(extend_node_snp)[0..2] AS top_extend_snps,\n     collect(r_extend_snp)[0..2] AS top_r_extend_snps,\n     collect(pip_value)[0..2] AS top_pip_values\n\n// Step 4: Match and limit pathway nodes\nOPTIONAL MATCH (gene_node)-[r_extend_pathway]-(extend_pathway_node)\nWHERE 'pathway' IN labels(extend_pathway_node)\nWITH snp_node, r, gene_node, top_extend_genes, top_r_extend_genes, top_distances,\n     top_extend_snps, top_r_extend_snps, top_pip_values,\n     r_extend_pathway, extend_pathway_node\nORDER BY id(extend_pathway_node) // Optional: Order pathways if needed\nWITH snp_node, r, gene_node, top_extend_genes, top_r_extend_genes, top_distances,\n     top_extend_snps, top_r_extend_snps, top_pip_values,\n     collect(extend_pathway_node)[0..2] AS top_extend_pathways,\n     collect(r_extend_pathway)[0..2] AS top_r_extend_pathways\n\n// Step 5: Match and limit open chromatin region nodes\nOPTIONAL MATCH (gene_node)-[r_extend_ocr]-(extend_ocr_node)\nWHERE 'open_chromatin_region' IN labels(extend_ocr_node)\nWITH snp_node, r, gene_node, top_extend_genes, top_r_extend_genes, top_distances,\n     top_extend_snps, top_r_extend_snps, top_pip_values,\n     top_extend_pathways, top_r_extend_pathways,\n     r_extend_ocr, extend_ocr_node\nORDER BY id(extend_ocr_node) // Optional: Order OCR nodes if needed\nWITH snp_node, r, gene_node, top_extend_genes, top_r_extend_genes, top_distances,\n     top_extend_snps, top_r_extend_snps, top_pip_values,\n     top_extend_pathways, top_r_extend_pathways,\n     collect(extend_ocr_node)[0..2] AS top_extend_ocr_nodes,\n     collect(r_extend_ocr)[0..2] AS top_r_extend_ocr\n\n// Step 6: Match and limit ontology nodes\nOPTIONAL MATCH (gene_node)-[r_extend_ontology]-(extend_ontology_node)\nWHERE 'ontology' IN labels(extend_ontology_node)\nWITH snp_node, r, gene_node, top_extend_genes, top_r_extend_genes, top_distances,\n     top_extend_snps, top_r_extend_snps, top_pip_values,\n     top_extend_pathways, top_r_extend_pathways,\n     top_extend_ocr_nodes, top_r_extend_ocr,\n     r_extend_ontology, extend_ontology_node\nORDER BY id(extend_ontology_node) // Optional: Order ontology nodes if needed\nWITH snp_node, r, gene_node, top_extend_genes, top_r_extend_genes, top_distances,\n     top_extend_snps, top_r_extend_snps, top_pip_values,\n     top_extend_pathways, top_r_extend_pathways,\n     top_extend_ocr_nodes, top_r_extend_ocr,\n     collect(extend_ontology_node)[0..2] AS top_extend_ontology_nodes,\n     collect(r_extend_ontology)[0..2] AS top_r_extend_ontology\n\n// Step 7: Return results\nRETURN snp_node, r, gene_node,\n       top_extend_genes AS extend_node_genes,\n       top_r_extend_genes AS r_extend_genes,\n       top_extend_snps AS extend_node_snps,\n       top_r_extend_snps AS r_extend_snps,\n       top_extend_pathways AS extend_pathway_nodes,\n       top_r_extend_pathways AS r_extend_pathways,\n       top_extend_ocr_nodes AS extend_ocr_nodes,\n       top_r_extend_ocr AS r_extend_ocr,\n       top_extend_ontology_nodes AS extend_ontology_nodes,\n       top_r_extend_ontology AS r_extend_ontology"
              ,
            "next_questions": [
                "What regulatory impact does the lead SNP @lead_snp_node@ from the credible set have on @gene_node@ eQTL within @tissue@ tissue, according to @data_source@ evidence?":
                  {
                  "@lead_snp_node@":"sequence_variant",
                  "relationship": "fine_mapped_eQTL",
                  "@gene_node@": "gene"
                  }
            ],
            "visualizations": {
                "manhattan_plot": {
                    "credible_set_id": "@credible_set@"
                }
            }
        },
      "specific - relationship - specific": {
            "question_for_result": 
              "What regulatory impact does the lead SNP @lead_snp_node@ from the credible set have on @gene_node@ eQTL within @gene_node@ tissue, according to @data_source@ evidence?"
              ,
            "cyper_for_result_page_all_nodes_specific": 
              "MATCH (snp_node:variants:sequence_variant {id: '@lead_snp_node@'})-[r:fine_mapped_eQTL]-(gene_node:coding_elements {id: '@gene_node@'}) OPTIONAL MATCH (snp_node)-[r1]-(extend_node_snp) OPTIONAL MATCH (gene_node)-[r2]-(extend_node_gene) RETURN snp_node, r, gene_node, r1, extend_node_snp, r2, extend_node_gene LIMIT 15"
              ,
            "next_questions": [
                "What regulatory impact does the lead SNP @lead_snp_node@ from the credible set have on @gene_node@ eQTL within @tissue@ tissue, according to @data_source@ evidence?":
                  {
                  "@lead_snp_node@":"sequence_variant",
                  "relationship": "fine_mapped_eQTL",
                  "@gene_node@": "gene"
                  }
            ],
            "visualizations": {
                "manhattan_plot": {
                    "credible_set_id": "@credible_set@"
                }
            }
        }
    }
}
